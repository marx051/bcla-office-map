import {
  require_prop_types
} from "./chunk-MH6OOWFU.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/react-svg-pan-zoom/build-es/viewer.js
var import_react15 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/transformation-matrix/src/applyToPoint.js
function applyToPoint(matrix, point) {
  return Array.isArray(point) ? [
    matrix.a * point[0] + matrix.c * point[1] + matrix.e,
    matrix.b * point[0] + matrix.d * point[1] + matrix.f
  ] : {
    x: matrix.a * point.x + matrix.c * point.y + matrix.e,
    y: matrix.b * point.x + matrix.d * point.y + matrix.f
  };
}
function applyToPoints(matrix, points) {
  return points.map((point) => applyToPoint(matrix, point));
}

// node_modules/transformation-matrix/src/fromObject.js
function fromObject(object) {
  return {
    a: parseFloat(object.a),
    b: parseFloat(object.b),
    c: parseFloat(object.c),
    d: parseFloat(object.d),
    e: parseFloat(object.e),
    f: parseFloat(object.f)
  };
}

// node_modules/transformation-matrix/src/identity.js
function identity() {
  return {
    a: 1,
    c: 0,
    e: 0,
    b: 0,
    d: 1,
    f: 0
  };
}

// node_modules/transformation-matrix/src/inverse.js
function inverse(matrix) {
  const { a, b, c, d, e, f } = matrix;
  const denom = a * d - b * c;
  return {
    a: d / denom,
    b: b / -denom,
    c: c / -denom,
    d: a / denom,
    e: (d * e - c * f) / -denom,
    f: (b * e - a * f) / denom
  };
}

// node_modules/transformation-matrix/src/utils.js
function isUndefined(val) {
  return typeof val === "undefined";
}

// node_modules/transformation-matrix/src/translate.js
function translate(tx, ty = 0) {
  return {
    a: 1,
    c: 0,
    e: tx,
    b: 0,
    d: 1,
    f: ty
  };
}

// node_modules/transformation-matrix/src/transform.js
function transform(...matrices) {
  matrices = Array.isArray(matrices[0]) ? matrices[0] : matrices;
  const multiply = (m1, m2) => {
    return {
      a: m1.a * m2.a + m1.c * m2.b,
      c: m1.a * m2.c + m1.c * m2.d,
      e: m1.a * m2.e + m1.c * m2.f + m1.e,
      b: m1.b * m2.a + m1.d * m2.b,
      d: m1.b * m2.c + m1.d * m2.d,
      f: m1.b * m2.e + m1.d * m2.f + m1.f
    };
  };
  switch (matrices.length) {
    case 0:
      throw new Error("no matrices provided");
    case 1:
      return matrices[0];
    case 2:
      return multiply(matrices[0], matrices[1]);
    default: {
      const [m1, m2, ...rest] = matrices;
      const m = multiply(m1, m2);
      return transform(m, ...rest);
    }
  }
}

// node_modules/transformation-matrix/src/rotate.js
var { cos, sin, PI } = Math;

// node_modules/transformation-matrix/src/scale.js
function scale(sx, sy = void 0, cx = void 0, cy = void 0) {
  if (isUndefined(sy))
    sy = sx;
  const scaleMatrix = {
    a: sx,
    c: 0,
    e: 0,
    b: 0,
    d: sy,
    f: 0
  };
  if (isUndefined(cx) || isUndefined(cy)) {
    return scaleMatrix;
  }
  return transform([
    translate(cx, cy),
    scaleMatrix,
    translate(-cx, -cy)
  ]);
}

// node_modules/transformation-matrix/src/skew.js
var { tan } = Math;

// node_modules/transformation-matrix/src/toString.js
function toSVG(matrix) {
  return toString(matrix);
}
function toString(matrix) {
  return `matrix(${matrix.a},${matrix.b},${matrix.c},${matrix.d},${matrix.e},${matrix.f})`;
}

// node_modules/transformation-matrix/src/fromTransformAttribute.autogenerated.js
function peg$subclass(child, parent) {
  function C() {
    this.constructor = child;
  }
  C.prototype = parent.prototype;
  child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = this.location.source && typeof this.location.source.offset === "function" ? this.location.source.offset(s) : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, " ");
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = last - s.column || 1;
      str += "\n --> " + loc + "\n" + filler + " |\n" + offset_s.line + " | " + line + "\n" + filler + " | " + peg$padEnd("", s.column - 1, " ") + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};
peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },
    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
      });
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },
    any: function() {
      return "any character";
    },
    end: function() {
      return "end of input";
    },
    other: function(expectation) {
      return expectation.description;
    }
  };
  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }
  function literalEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function classEscape(s) {
    return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
      return "\\x0" + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
      return "\\x" + hex(ch);
    });
  }
  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }
  function describeExpected(expected2) {
    var descriptions = expected2.map(describeExpectation);
    var i, j;
    descriptions.sort();
    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }
    switch (descriptions.length) {
      case 1:
        return descriptions[0];
      case 2:
        return descriptions[0] + " or " + descriptions[1];
      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }
  function describeFound(found2) {
    return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
  }
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// node_modules/react-svg-pan-zoom/build-es/constants.js
var MODE_IDLE = "idle";
var MODE_PANNING = "panning";
var MODE_ZOOMING = "zooming";
var TOOL_AUTO = "auto";
var TOOL_NONE = "none";
var TOOL_PAN = "pan";
var TOOL_ZOOM_IN = "zoom-in";
var TOOL_ZOOM_OUT = "zoom-out";
var POSITION_NONE = "none";
var POSITION_TOP = "top";
var POSITION_RIGHT = "right";
var POSITION_BOTTOM = "bottom";
var POSITION_LEFT = "left";
var ACTION_ZOOM = "zoom";
var ACTION_PAN = "pan";
var ALIGN_CENTER = "center";
var ALIGN_LEFT = "left";
var ALIGN_RIGHT = "right";
var ALIGN_TOP = "top";
var ALIGN_BOTTOM = "bottom";
var ALIGN_COVER = "cover";
var INITIAL_VALUE = {};

// node_modules/react-svg-pan-zoom/build-es/features/common.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var VERSION = 3;
var DEFAULT_MODE = MODE_IDLE;
function getDefaultValue(viewerWidth, viewerHeight, SVGMinX, SVGMinY, SVGWidth, SVGHeight) {
  let scaleFactorMin = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
  let scaleFactorMax = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
  return set({}, _objectSpread(_objectSpread({}, identity()), {}, {
    version: VERSION,
    mode: DEFAULT_MODE,
    focus: false,
    pinchPointDistance: null,
    prePinchMode: null,
    viewerWidth,
    viewerHeight,
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight,
    scaleFactorMin,
    scaleFactorMax,
    startX: null,
    startY: null,
    endX: null,
    endY: null,
    miniatureOpen: true,
    lastAction: null
  }));
}
function set(value, patch) {
  let action = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
  value = Object.assign({}, value, patch, {
    lastAction: action
  });
  return Object.freeze(value);
}
function isValueValid(value) {
  return value !== null && typeof value === "object" && value.hasOwnProperty("version") && value.version === VERSION;
}
function getSVGPoint(value, viewerX, viewerY) {
  let matrix = fromObject(value);
  let inverseMatrix = inverse(matrix);
  return applyToPoint(inverseMatrix, {
    x: viewerX,
    y: viewerY
  });
}
function decompose(value) {
  let matrix = fromObject(value);
  return {
    scaleFactor: matrix.a,
    translationX: matrix.e,
    translationY: matrix.f
  };
}
function setFocus(value, focus) {
  return set(value, {
    focus
  });
}
function setViewerSize(value, viewerWidth, viewerHeight) {
  return set(value, {
    viewerWidth,
    viewerHeight
  });
}
function setSVGViewBox(value, SVGMinX, SVGMinY, SVGWidth, SVGHeight) {
  return set(value, {
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight
  });
}
function setZoomLevels(value, scaleFactorMin, scaleFactorMax) {
  return set(value, {
    scaleFactorMin,
    scaleFactorMax
  });
}
function setPointOnViewerCenter(value, SVGPointX, SVGPointY, zoomLevel) {
  let {
    viewerWidth,
    viewerHeight
  } = value;
  let matrix = transform(
    translate(-SVGPointX + viewerWidth / 2, -SVGPointY + viewerHeight / 2),
    //4
    translate(SVGPointX, SVGPointY),
    //3
    scale(zoomLevel, zoomLevel),
    //2
    translate(-SVGPointX, -SVGPointY)
    //1
  );
  return set(value, _objectSpread({
    mode: MODE_IDLE
  }, matrix));
}
function reset(value) {
  return set(value, _objectSpread({
    mode: MODE_IDLE
  }, identity()));
}
function resetMode(value) {
  return set(value, {
    mode: DEFAULT_MODE,
    startX: null,
    startY: null,
    endX: null,
    endY: null
  });
}

// node_modules/react-svg-pan-zoom/build-es/events/viewer-event.js
var ViewerEvent = class {
  constructor(originalEvent, value, SVGViewer) {
    this.originalEvent = originalEvent;
    this.value = value;
    this.SVGViewer = SVGViewer;
  }
  get scaleFactor() {
    this._cacheDecomposedValue = this._cacheDecomposedValue || decompose(this.value);
    return this._cacheDecomposedValue.scaleFactor;
  }
  get translationX() {
    this._cacheDecomposedValue = this._cacheDecomposedValue || decompose(this.value);
    return this._cacheDecomposedValue.translationX;
  }
  get translationY() {
    this._cacheDecomposedValue = this._cacheDecomposedValue || decompose(this.value);
    return this._cacheDecomposedValue.translationY;
  }
  preventDefault() {
    this.originalEvent.preventDefault();
  }
  stopPropagation() {
    this.originalEvent.stopPropagation();
  }
};

// node_modules/react-svg-pan-zoom/build-es/features/pan.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty2(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty2(e, r, t) {
  return (r = _toPropertyKey2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey2(t) {
  var i = _toPrimitive2(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive2(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function pan(value, SVGDeltaX, SVGDeltaY) {
  let panLimit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
  let matrix = transform(
    fromObject(value),
    //2
    translate(SVGDeltaX, SVGDeltaY)
    //1
  );
  if (panLimit) {
    let [{
      x: x1,
      y: y1
    }, {
      x: x2,
      y: y2
    }] = applyToPoints(matrix, [{
      x: value.SVGMinX + panLimit,
      y: value.SVGMinY + panLimit
    }, {
      x: value.SVGMinX + value.SVGWidth - panLimit,
      y: value.SVGMinY + value.SVGHeight - panLimit
    }]);
    let moveX = 0;
    if (value.viewerWidth - x1 < 0)
      moveX = value.viewerWidth - x1;
    else if (x2 < 0)
      moveX = -x2;
    let moveY = 0;
    if (value.viewerHeight - y1 < 0)
      moveY = value.viewerHeight - y1;
    else if (y2 < 0)
      moveY = -y2;
    matrix = transform(translate(moveX, moveY), matrix);
  }
  return set(value, _objectSpread2({
    mode: MODE_IDLE
  }, matrix), ACTION_PAN);
}
function startPanning(value, viewerX, viewerY) {
  return set(value, {
    mode: MODE_PANNING,
    startX: viewerX,
    startY: viewerY,
    endX: viewerX,
    endY: viewerY
  }, ACTION_PAN);
}
function updatePanning(value, viewerX, viewerY, panLimit) {
  if (value.mode !== MODE_PANNING)
    throw new Error("update pan not allowed in this mode " + value.mode);
  let {
    endX,
    endY
  } = value;
  let start = getSVGPoint(value, endX, endY);
  let end = getSVGPoint(value, viewerX, viewerY);
  let deltaX = end.x - start.x;
  let deltaY = end.y - start.y;
  let nextValue = pan(value, deltaX, deltaY, panLimit);
  return set(nextValue, {
    mode: MODE_PANNING,
    endX: viewerX,
    endY: viewerY
  }, ACTION_PAN);
}
function stopPanning(value) {
  return set(value, {
    mode: MODE_IDLE,
    startX: null,
    startY: null,
    endX: null,
    endY: null
  }, ACTION_PAN);
}
function autoPanIfNeeded(value, viewerX, viewerY) {
  let deltaX = 0;
  let deltaY = 0;
  if (viewerY <= 20)
    deltaY = 2;
  if (value.viewerWidth - viewerX <= 20)
    deltaX = -2;
  if (value.viewerHeight - viewerY <= 20)
    deltaY = -2;
  if (viewerX <= 20)
    deltaX = 2;
  deltaX = deltaX / value.d;
  deltaY = deltaY / value.d;
  return deltaX === 0 && deltaY === 0 ? value : pan(value, deltaX, deltaY);
}

// node_modules/react-svg-pan-zoom/build-es/utils/calculateBox.js
function calculateBox(start, end) {
  if (start.x <= end.x && start.y <= end.y) {
    return {
      x: start.x,
      y: start.y,
      width: end.x - start.x,
      height: end.y - start.y
    };
  } else if (start.x >= end.x && start.y <= end.y) {
    return {
      x: end.x,
      y: start.y,
      width: start.x - end.x,
      height: end.y - start.y
    };
  } else if (start.x >= end.x && start.y >= end.y) {
    return {
      x: end.x,
      y: end.y,
      width: start.x - end.x,
      height: start.y - end.y
    };
  } else if (start.x <= end.x && start.y >= end.y) {
    return {
      x: start.x,
      y: end.y,
      width: end.x - start.x,
      height: start.y - end.y
    };
  }
}

// node_modules/react-svg-pan-zoom/build-es/features/zoom.js
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty3(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty3(e, r, t) {
  return (r = _toPropertyKey3(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey3(t) {
  var i = _toPrimitive3(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive3(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function isZoomLevelGoingOutOfBounds(value, scaleFactor) {
  const {
    scaleFactor: curScaleFactor
  } = decompose(value);
  const lessThanScaleFactorMin = value.scaleFactorMin && curScaleFactor * scaleFactor < value.scaleFactorMin;
  const moreThanScaleFactorMax = value.scaleFactorMax && curScaleFactor * scaleFactor > value.scaleFactorMax;
  return lessThanScaleFactorMin && scaleFactor < 1 || moreThanScaleFactorMax && scaleFactor > 1;
}
function limitZoomLevel(value, matrix) {
  let scaleLevel = matrix.a;
  if (value.scaleFactorMin != null) {
    scaleLevel = Math.max(scaleLevel, value.scaleFactorMin);
  }
  if (value.scaleFactorMax != null) {
    scaleLevel = Math.min(scaleLevel, value.scaleFactorMax);
  }
  return set(matrix, {
    a: scaleLevel,
    d: scaleLevel
  });
}
function zoom(value, SVGPointX, SVGPointY, scaleFactor) {
  if (isZoomLevelGoingOutOfBounds(value, scaleFactor)) {
    return value;
  }
  const matrix = transform(fromObject(value), translate(SVGPointX, SVGPointY), scale(scaleFactor, scaleFactor), translate(-SVGPointX, -SVGPointY));
  return set(value, _objectSpread3(_objectSpread3({
    mode: MODE_IDLE
  }, matrix), {}, {
    startX: null,
    startY: null,
    endX: null,
    endY: null
  }), ACTION_ZOOM);
}
function fitSelection(value, selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {
  let {
    viewerWidth,
    viewerHeight
  } = value;
  let scaleX = viewerWidth / selectionWidth;
  let scaleY = viewerHeight / selectionHeight;
  let scaleLevel = Math.min(scaleX, scaleY);
  const matrix = transform(
    scale(scaleLevel, scaleLevel),
    //2
    translate(-selectionSVGPointX, -selectionSVGPointY)
    //1
  );
  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {
    return set(value, {
      mode: MODE_IDLE,
      startX: null,
      startY: null,
      endX: null,
      endY: null
    });
  }
  return set(value, _objectSpread3(_objectSpread3({
    mode: MODE_IDLE
  }, limitZoomLevel(value, matrix)), {}, {
    startX: null,
    startY: null,
    endX: null,
    endY: null
  }), ACTION_ZOOM);
}
function fitToViewer(value) {
  let SVGAlignX = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ALIGN_LEFT;
  let SVGAlignY = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ALIGN_TOP;
  let {
    viewerWidth,
    viewerHeight,
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight
  } = value;
  let scaleX = viewerWidth / SVGWidth;
  let scaleY = viewerHeight / SVGHeight;
  let scaleLevel = Math.min(scaleX, scaleY);
  let scaleMatrix = scale(scaleLevel, scaleLevel);
  let translateX = -SVGMinX * scaleX;
  let translateY = -SVGMinY * scaleY;
  if (scaleX < scaleY) {
    let remainderY = viewerHeight - scaleX * SVGHeight;
    switch (SVGAlignY) {
      case ALIGN_TOP:
        translateY = -SVGMinY * scaleLevel;
        break;
      case ALIGN_CENTER:
        translateY = Math.round(remainderY / 2) - SVGMinY * scaleLevel;
        break;
      case ALIGN_BOTTOM:
        translateY = remainderY - SVGMinY * scaleLevel;
        break;
      case ALIGN_COVER:
        scaleMatrix = scale(scaleY, scaleY);
        let remainderX = viewerWidth - scaleY * SVGWidth;
        translateX = SVGMinX + Math.round(remainderX / 2);
        break;
      default:
    }
  } else {
    let remainderX = viewerWidth - scaleY * SVGWidth;
    switch (SVGAlignX) {
      case ALIGN_LEFT:
        translateX = -SVGMinX * scaleLevel;
        break;
      case ALIGN_CENTER:
        translateX = Math.round(remainderX / 2) - SVGMinX * scaleLevel;
        break;
      case ALIGN_RIGHT:
        translateX = remainderX - SVGMinX * scaleLevel;
        break;
      case ALIGN_COVER:
        scaleMatrix = scale(scaleX, scaleX);
        let remainderY = viewerHeight - scaleX * SVGHeight;
        translateY = SVGMinY + Math.round(remainderY / 2);
        break;
      default:
    }
  }
  const translationMatrix = translate(translateX, translateY);
  const matrix = transform(
    translationMatrix,
    //2
    scaleMatrix
    //1
  );
  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {
    return set(value, {
      mode: MODE_IDLE,
      startX: null,
      startY: null,
      endX: null,
      endY: null
    });
  }
  return set(value, _objectSpread3(_objectSpread3({
    mode: MODE_IDLE
  }, limitZoomLevel(value, matrix)), {}, {
    startX: null,
    startY: null,
    endX: null,
    endY: null
  }), ACTION_ZOOM);
}
function zoomOnViewerCenter(value, scaleFactor) {
  let {
    viewerWidth,
    viewerHeight
  } = value;
  let SVGPoint = getSVGPoint(value, viewerWidth / 2, viewerHeight / 2);
  return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor);
}
function startZooming(value, viewerX, viewerY) {
  return set(value, {
    mode: MODE_ZOOMING,
    startX: viewerX,
    startY: viewerY,
    endX: viewerX,
    endY: viewerY
  });
}
function updateZooming(value, viewerX, viewerY) {
  if (value.mode !== MODE_ZOOMING)
    throw new Error("update selection not allowed in this mode " + value.mode);
  return set(value, {
    endX: viewerX,
    endY: viewerY
  });
}
function stopZooming(value, viewerX, viewerY, scaleFactor) {
  const TOLERATED_DISTANCE = 7;
  let {
    startX,
    startY
  } = value;
  let start = getSVGPoint(value, startX, startY);
  let end = getSVGPoint(value, viewerX, viewerY);
  if (Math.abs(startX - viewerX) > TOLERATED_DISTANCE && Math.abs(startY - viewerY) > TOLERATED_DISTANCE) {
    let box = calculateBox(start, end);
    return fitSelection(value, box.x, box.y, box.width, box.height);
  } else {
    let SVGPoint = getSVGPoint(value, viewerX, viewerY);
    return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor);
  }
}

// node_modules/react-svg-pan-zoom/build-es/utils/mapRange.js
function mapRange(value, sourceStart, sourceEnd, targetStart, targetEnd) {
  return targetStart + (targetEnd - targetStart) * (value - sourceStart) / (sourceEnd - sourceStart);
}

// node_modules/react-svg-pan-zoom/build-es/features/interactions.js
function getMousePosition(event, ViewerDOM) {
  let {
    left,
    top
  } = ViewerDOM.getBoundingClientRect();
  let x = event.clientX - Math.round(left);
  let y = event.clientY - Math.round(top);
  return {
    x,
    y
  };
}
function onMouseDown(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  const {
    x,
    y
  } = coords || getMousePosition(event, ViewerDOM);
  let nextValue = value;
  switch (tool) {
    case TOOL_ZOOM_OUT:
      let SVGPoint = getSVGPoint(value, x, y);
      nextValue = zoom(value, SVGPoint.x, SVGPoint.y, 1 / props.scaleFactor, props);
      break;
    case TOOL_ZOOM_IN:
      nextValue = startZooming(value, x, y);
      break;
    case TOOL_AUTO:
    case TOOL_PAN:
      nextValue = startPanning(value, x, y);
      break;
    default:
      return value;
  }
  event.preventDefault();
  return nextValue;
}
function onMouseMove(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  const {
    x,
    y
  } = coords || getMousePosition(event, ViewerDOM);
  let forceExit = event.buttons === 0;
  let nextValue = value;
  switch (tool) {
    case TOOL_ZOOM_IN:
      if (value.mode === MODE_ZOOMING)
        nextValue = forceExit ? stopZooming(value, x, y, props.scaleFactor, props) : updateZooming(value, x, y);
      break;
    case TOOL_AUTO:
    case TOOL_PAN:
      if (value.mode === MODE_PANNING)
        nextValue = forceExit ? stopPanning(value) : updatePanning(value, x, y, props.preventPanOutside ? 20 : void 0);
      break;
    default:
      return value;
  }
  event.preventDefault();
  return nextValue;
}
function onMouseUp(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  const {
    x,
    y
  } = coords || getMousePosition(event, ViewerDOM);
  let nextValue = value;
  switch (tool) {
    case TOOL_ZOOM_OUT:
      if (value.mode === MODE_ZOOMING)
        nextValue = stopZooming(value, x, y, 1 / props.scaleFactor, props);
      break;
    case TOOL_ZOOM_IN:
      if (value.mode === MODE_ZOOMING)
        nextValue = stopZooming(value, x, y, props.scaleFactor, props);
      break;
    case TOOL_AUTO:
    case TOOL_PAN:
      if (value.mode === MODE_PANNING)
        nextValue = stopPanning(value);
      break;
    default:
      return value;
  }
  event.preventDefault();
  return nextValue;
}
function onDoubleClick(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  const {
    x,
    y
  } = coords || getMousePosition(event, ViewerDOM);
  let nextValue = value;
  if (tool === TOOL_AUTO && !props.disableDoubleClickZoomWithToolAuto) {
    const {
      modifierKeys = []
    } = props;
    let SVGPoint = getSVGPoint(value, x, y);
    let modifierKeysReducer = (current, modifierKey) => current || event.getModifierState(modifierKey);
    let modifierKeyActive = modifierKeys.reduce(modifierKeysReducer, false);
    let scaleFactor = modifierKeyActive ? 1 / props.scaleFactor : props.scaleFactor;
    nextValue = zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor, props);
  }
  event.preventDefault();
  return nextValue;
}
function onWheel(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  const {
    x,
    y
  } = coords || getMousePosition(event, ViewerDOM);
  if (!props.detectWheel)
    return value;
  let delta = Math.max(-1, Math.min(1, event.deltaY));
  let scaleFactor = mapRange(delta, -1, 1, props.scaleFactorOnWheel, 1 / props.scaleFactorOnWheel);
  let SVGPoint = getSVGPoint(value, x, y);
  let nextValue = zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor, props);
  event.preventDefault();
  return nextValue;
}
function onMouseEnterOrLeave(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  let nextValue = setFocus(value, event.type === "mouseenter");
  event.preventDefault();
  return nextValue;
}
function onInterval(event, ViewerDOM, tool, value, props) {
  let coords = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
  let {
    x,
    y
  } = coords;
  if (!([TOOL_NONE, TOOL_AUTO].indexOf(tool) >= 0))
    return value;
  if (!props.detectAutoPan)
    return value;
  if (!value.focus)
    return value;
  return autoPanIfNeeded(value, x, y);
}

// node_modules/react-svg-pan-zoom/build-es/events/viewer-mouse-event.js
var ViewerMouseEvent = class extends ViewerEvent {
  get point() {
    if (!this._cachePoint) {
      const {
        originalEvent: event,
        SVGViewer,
        value
      } = this;
      const mousePosition = getMousePosition(event, SVGViewer);
      this._cachePoint = getSVGPoint(value, mousePosition.x, mousePosition.y);
    }
    return this._cachePoint;
  }
  get x() {
    return this.point.x;
  }
  get y() {
    return this.point.y;
  }
};

// node_modules/react-svg-pan-zoom/build-es/events/viewer-touch-event.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty4(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty4(e, r, t) {
  return (r = _toPropertyKey4(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey4(t) {
  var i = _toPrimitive4(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive4(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var ViewerTouchEvent = class _ViewerTouchEvent extends ViewerEvent {
  get points() {
    if (!this._cachePoints)
      this._cachePoints = _ViewerTouchEvent.touchesToPoints(this.originalEvent.touches, this.SVGViewer, this.value);
    return this._cachePoints;
  }
  get changedPoints() {
    if (!this._cacheChangedPoints)
      this._cacheChangedPoints = _ViewerTouchEvent.touchesToPoints(this.originalEvent.changedTouches, this.SVGViewer, this.value);
    return this._cacheChangedPoints;
  }
  static touchesToPoints(touches, SVGViewer, value) {
    let points = [];
    for (let i = 0; i < touches.length; i++) {
      let touch = touches[i];
      let rect = SVGViewer.getBoundingClientRect();
      let x = touch.clientX - Math.round(rect.left);
      let y = touch.clientY - Math.round(rect.top);
      let point = getSVGPoint(value, x, y);
      points.push(_objectSpread4(_objectSpread4({}, point), {}, {
        identifier: touch.identifier
      }));
    }
    return points;
  }
};

// node_modules/react-svg-pan-zoom/build-es/events/event-factory.js
function eventFactory(originalEvent, value, SVGViewer) {
  let eventType = originalEvent.type;
  switch (eventType) {
    case "mousemove":
    case "mouseup":
    case "mousedown":
    case "click":
    case "dblclick":
      return new ViewerMouseEvent(originalEvent, value, SVGViewer);
    case "touchstart":
    case "touchmove":
    case "touchend":
    case "touchcancel":
      return new ViewerTouchEvent(originalEvent, value, SVGViewer);
    default:
      throw new Error(`${eventType} not supported`);
  }
}

// node_modules/react-svg-pan-zoom/build-es/utils/parseViewBox.js
function parseViewBox(viewBoxString) {
  return viewBoxString.split(/[ ,]/).filter(Boolean).map(Number);
}

// node_modules/react-svg-pan-zoom/build-es/features/interactions-touch.js
function ownKeys5(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread5(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys5(Object(t), true).forEach(function(r2) {
      _defineProperty5(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys5(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty5(e, r, t) {
  return (r = _toPropertyKey5(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey5(t) {
  var i = _toPrimitive5(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive5(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function getTouchPosition(touch, ViewerDOM) {
  let {
    left,
    top
  } = ViewerDOM.getBoundingClientRect();
  let x = touch.clientX - Math.round(left);
  let y = touch.clientY - Math.round(top);
  return {
    x,
    y
  };
}
function onTouchStart(event, ViewerDOM, tool, value, props) {
  if (isMultiTouch(event, props)) {
    return onMultiTouch(event, ViewerDOM, tool, value, props);
  }
  if (event.touches.length !== 1) {
    if ([MODE_PANNING, MODE_ZOOMING].indexOf(value.mode) >= 0) {
      return resetMode(value);
    } else if ([MODE_IDLE].indexOf(value.mode) >= 0) {
      return value;
    }
  }
  return onSingleTouch(event, ViewerDOM, tool, value, props, onMouseDown);
}
function onTouchMove(event, ViewerDOM, tool, value, props) {
  if (isMultiTouch(event, props)) {
    return onMultiTouch(event, ViewerDOM, tool, value, props);
  }
  if (!([MODE_PANNING, MODE_ZOOMING].indexOf(value.mode) >= 0)) {
    return value;
  }
  return onSingleTouch(event, ViewerDOM, tool, value, props, onMouseMove);
}
function onTouchEnd(event, ViewerDOM, tool, value, props) {
  if (!([MODE_PANNING, MODE_ZOOMING].indexOf(value.mode) >= 0)) {
    return value;
  }
  let nextValue = shouldResetPinchPointDistance(event, value, props) ? set(value, {
    pinchPointDistance: null
  }) : value;
  if (event.touches.length > 0) {
    return nextValue;
  }
  return onSingleTouch(event, ViewerDOM, tool, nextValue, props, onMouseUp);
}
function onTouchCancel(event, ViewerDOM, tool, value, props) {
  event.stopPropagation();
  event.preventDefault();
  return resetMode(value);
}
function hasPinchPointDistance(value) {
  return typeof value.pinchPointDistance === "number";
}
function shouldResetPinchPointDistance(event, value, props) {
  return props.detectPinchGesture && hasPinchPointDistance(value) && event.touches.length < 2;
}
function isMultiTouch(event, props) {
  return props.detectPinchGesture && event.touches.length > 1;
}
function onSingleTouch(event, ViewerDOM, tool, value, props, nextValueFn) {
  let nextValue = event.touches.length === 0 ? set(value, {
    mode: value.prePinchMode ? MODE_IDLE : value.mode,
    prePinchMode: null
  }) : value;
  let touch = event.touches.length > 0 ? event.touches[0] : event.changedTouches[0];
  let touchPosition = getTouchPosition(touch, ViewerDOM);
  switch (tool) {
    case TOOL_ZOOM_OUT:
    case TOOL_ZOOM_IN:
    case TOOL_AUTO:
    case TOOL_PAN:
      event.stopPropagation();
      event.preventDefault();
      return nextValueFn(event, ViewerDOM, tool, nextValue, props, touchPosition);
    default:
      return nextValue;
  }
}
function onMultiTouch(event, ViewerDOM, tool, value, props) {
  const {
    left,
    top
  } = ViewerDOM.getBoundingClientRect();
  const x1 = event.touches[0].clientX - Math.round(left);
  const y1 = event.touches[0].clientY - Math.round(top);
  const x2 = event.touches[1].clientX - Math.round(left);
  const y2 = event.touches[1].clientY - Math.round(top);
  const pinchPointDistance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  const previousPointDistance = hasPinchPointDistance(value) ? value.pinchPointDistance : pinchPointDistance;
  const svgPoint = getSVGPoint(value, (x1 + x2) / 2, (y1 + y2) / 2);
  let distanceFactor = pinchPointDistance / previousPointDistance;
  if (isZoomLevelGoingOutOfBounds(value, distanceFactor)) {
    return value;
  }
  if (event.cancelable) {
    event.preventDefault();
  }
  let matrix = transform(fromObject(value), translate(svgPoint.x, svgPoint.y), scale(distanceFactor, distanceFactor), translate(-svgPoint.x, -svgPoint.y));
  return set(value, set(_objectSpread5(_objectSpread5({
    mode: MODE_ZOOMING
  }, limitZoomLevel(value, matrix)), {}, {
    startX: null,
    startY: null,
    endX: null,
    endY: null,
    prePinchMode: value.prePinchMode ? value.prePinchMode : value.mode,
    pinchPointDistance
  })));
}

// node_modules/react-svg-pan-zoom/build-es/features/miniature.js
function openMiniature(value) {
  return set(value, {
    miniatureOpen: true
  });
}
function closeMiniature(value) {
  return set(value, {
    miniatureOpen: false
  });
}

// node_modules/react-svg-pan-zoom/build-es/ui/cursor-polyfill.js
var needPrefix = (cursor) => ["zoom-in", "zoom-out", "grab", "grabbing"].indexOf(cursor) > -1;
var userAgent = () => navigator.userAgent.toLowerCase();
var isFirefox = () => userAgent().indexOf("firefox") > -1;
var isWebkit = () => userAgent().indexOf("webkit") > -1;
function cursor_polyfill_default(cursor) {
  if (!needPrefix(cursor))
    return cursor;
  if (isFirefox())
    return `-moz-${cursor}`;
  if (isWebkit())
    return `-webkit-${cursor}`;
}

// node_modules/react-svg-pan-zoom/build-es/ui/border-gradient.js
var import_react2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-svg-pan-zoom/build-es/utils/RandomUID.js
var import_react = __toESM(require_react());

// node_modules/react-svg-pan-zoom/build-es/utils/getDisplayName.js
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || "Component";
}

// node_modules/react-svg-pan-zoom/build-es/utils/RandomUID.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var uid = 1;
var nextUID = () => `uid${uid++}`;
function RandomUID(WrappedComponent) {
  class RandomUID2 extends import_react.default.Component {
    constructor(props) {
      super(props);
      this.state = {
        uid: nextUID()
      };
    }
    render() {
      return import_react.default.createElement(WrappedComponent, _extends({
        _uid: this.state.uid
      }, this.props));
    }
  }
  RandomUID2.displayName = `RandomUID(${getDisplayName(WrappedComponent)})`;
  return RandomUID2;
}

// node_modules/react-svg-pan-zoom/build-es/ui/border-gradient.js
var prefixID = "react-svg-pan-zoom_border_gradient";
function BorderGradient(_ref) {
  let {
    direction,
    width,
    height,
    _uid
  } = _ref;
  let transform2;
  switch (direction) {
    case POSITION_TOP:
      transform2 = `translate(${width}, 0) rotate(90)`;
      break;
    case POSITION_RIGHT:
      transform2 = `translate(${width}, ${height}) rotate(180)`;
      break;
    case POSITION_BOTTOM:
      transform2 = `translate(0, ${height}) rotate(270)`;
      break;
    case POSITION_LEFT:
    default:
      transform2 = " ";
      break;
  }
  let gradientID = `${prefixID}_gradient_${_uid}`;
  let maskID = `${prefixID}_mask_${_uid}`;
  return import_react2.default.createElement("g", null, import_react2.default.createElement("defs", null, import_react2.default.createElement("linearGradient", {
    id: gradientID,
    x1: "0%",
    y1: "0%",
    x2: "100%",
    y2: "0%",
    spreadMethod: "pad"
  }, import_react2.default.createElement("stop", {
    offset: "0%",
    stopColor: "#fff",
    stopOpacity: "0.8"
  }), import_react2.default.createElement("stop", {
    offset: "100%",
    stopColor: "#000",
    stopOpacity: "0.5"
  })), import_react2.default.createElement("mask", {
    id: maskID,
    x: "0",
    y: "0",
    width: "20",
    height: Math.max(width, height)
  }, import_react2.default.createElement("rect", {
    x: "0",
    y: "0",
    width: "20",
    height: Math.max(width, height),
    style: {
      stroke: "none",
      fill: `url(#${gradientID})`
    }
  }))), import_react2.default.createElement("rect", {
    x: "0",
    y: "0",
    width: "20",
    height: Math.max(width, height),
    style: {
      stroke: "none",
      fill: "#000",
      mask: `url(#${maskID})`
    },
    transform: transform2
  }));
}
BorderGradient.propTypes = {
  direction: import_prop_types.default.oneOf([POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]).isRequired,
  width: import_prop_types.default.number.isRequired,
  height: import_prop_types.default.number.isRequired
};
var border_gradient_default = RandomUID(BorderGradient);

// node_modules/react-svg-pan-zoom/build-es/ui/selection.js
var import_react3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
function Selection(_ref) {
  let {
    startX,
    startY,
    endX,
    endY
  } = _ref;
  if (!startX || !startY || !endX || !endY)
    return null;
  let box = calculateBox({
    x: startX,
    y: startY
  }, {
    x: endX,
    y: endY
  });
  return import_react3.default.createElement("rect", {
    stroke: "#969FFF",
    strokeOpacity: 0.7,
    fill: "#F3F4FF",
    fillOpacity: 0.7,
    x: box.x,
    y: box.y,
    width: box.width,
    height: box.height,
    style: {
      pointerEvents: "none"
    }
  });
}
Selection.propTypes = {
  startX: import_prop_types2.default.number,
  startY: import_prop_types2.default.number,
  endX: import_prop_types2.default.number,
  endY: import_prop_types2.default.number
};

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/toolbar.js
var import_react10 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/icon-cursor.js
var import_react4 = __toESM(require_react());
function IconCursor() {
  return import_react4.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react4.default.createElement("path", {
    d: "M10.07,14.27C10.57,14.03 11.16,14.25 11.4,14.75L13.7,19.74L15.5,18.89L13.19,13.91C12.95,13.41 13.17,12.81 13.67,12.58L13.95,12.5L16.25,12.05L8,5.12V15.9L9.82,14.43L10.07,14.27M13.64,21.97C13.14,22.21 12.54,22 12.31,21.5L10.13,16.76L7.62,18.78C7.45,18.92 7.24,19 7,19A1,1 0 0,1 6,18V3A1,1 0 0,1 7,2C7.24,2 7.47,2.09 7.64,2.23L7.65,2.22L19.14,11.86C19.57,12.22 19.62,12.85 19.27,13.27C19.12,13.45 18.91,13.57 18.7,13.61L15.54,14.23L17.74,18.96C18,19.46 17.76,20.05 17.26,20.28L13.64,21.97Z"
  }));
}

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/icon-pan.js
var import_react5 = __toESM(require_react());
function IconPan() {
  return import_react5.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react5.default.createElement("path", {
    d: "M13,6V11H18V7.75L22.25,12L18,16.25V13H13V18H16.25L12,22.25L7.75,18H11V13H6V16.25L1.75,12L6,7.75V11H11V6H7.75L12,1.75L16.25,6H13Z"
  }));
}

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/icon-zoom-in.js
var import_react6 = __toESM(require_react());
function IconZoomIn() {
  return import_react6.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react6.default.createElement("g", null, import_react6.default.createElement("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }), import_react6.default.createElement("path", {
    d: "M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"
  })));
}

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/icon-zoom-out.js
var import_react7 = __toESM(require_react());
function IconZoomOut() {
  return import_react7.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react7.default.createElement("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z"
  }));
}

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/icon-fit.js
var import_react8 = __toESM(require_react());
function IconFit() {
  return import_react8.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react8.default.createElement("path", {
    d: "M15 3l2.3 2.3-2.89 2.87 1.42 1.42L18.7 6.7 21 9V3zM3 9l2.3-2.3 2.87 2.89 1.42-1.42L6.7 5.3 9 3H3zm6 12l-2.3-2.3 2.89-2.87-1.42-1.42L5.3 17.3 3 15v6zm12-6l-2.3 2.3-2.87-2.89-1.42 1.42 2.89 2.87L15 21h6z"
  }));
}

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/toolbar-button.js
var import_react9 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var ToolbarButton = class extends import_react9.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      hover: false
    };
  }
  change(event) {
    event.preventDefault();
    event.stopPropagation();
    switch (event.type) {
      case "mouseenter":
      case "touchstart":
        this.setState({
          hover: true
        });
        break;
      case "mouseleave":
      case "touchend":
      case "touchcancel":
        this.setState({
          hover: false
        });
        break;
      default:
    }
  }
  render() {
    let style = {
      display: "block",
      width: "24px",
      height: "24px",
      margin: [POSITION_TOP, POSITION_BOTTOM].indexOf(this.props.toolbarPosition) >= 0 ? "2px 1px" : "1px 2px",
      color: this.props.active || this.state.hover ? this.props.activeColor : "#FFF",
      transition: "color 200ms ease",
      background: "none",
      padding: "0px",
      border: "0px",
      outline: "0px",
      cursor: "pointer"
    };
    return import_react9.default.createElement("button", {
      onMouseEnter: (e) => this.change(e),
      onMouseLeave: (e) => this.change(e),
      onTouchStart: (e) => {
        this.change(e);
        this.props.onClick(e);
      },
      onTouchEnd: (e) => this.change(e),
      onTouchCancel: (e) => this.change(e),
      onClick: this.props.onClick,
      style,
      title: this.props.title,
      name: this.props.name,
      type: "button"
    }, this.props.children);
  }
};
ToolbarButton.propTypes = {
  title: import_prop_types3.default.string.isRequired,
  name: import_prop_types3.default.string.isRequired,
  toolbarPosition: import_prop_types3.default.string.isRequired,
  activeColor: import_prop_types3.default.string.isRequired,
  onClick: import_prop_types3.default.func.isRequired,
  active: import_prop_types3.default.bool.isRequired
};

// node_modules/react-svg-pan-zoom/build-es/ui-toolbar/toolbar.js
var DEFAULT_ACTIVE_TOOL_COLOR = "#1CA6FC";
function Toolbar(_ref) {
  let {
    tool,
    value,
    onChangeValue,
    onChangeTool,
    activeToolColor = DEFAULT_ACTIVE_TOOL_COLOR,
    position = POSITION_RIGHT,
    SVGAlignX = ALIGN_LEFT,
    SVGAlignY = ALIGN_TOP
  } = _ref;
  let handleChangeTool = (event, tool2) => {
    onChangeTool(tool2);
    event.stopPropagation();
    event.preventDefault();
  };
  let handleFit = (event) => {
    onChangeValue(fitToViewer(value, SVGAlignX, SVGAlignY));
    event.stopPropagation();
    event.preventDefault();
  };
  let isHorizontal = [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0;
  let style = {
    //position
    position: "absolute",
    transform: [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0 ? "translate(-50%, 0px)" : "none",
    top: [POSITION_LEFT, POSITION_RIGHT, POSITION_TOP].indexOf(position) >= 0 ? "5px" : "unset",
    left: [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0 ? "50%" : POSITION_LEFT === position ? "5px" : "unset",
    right: [POSITION_RIGHT].indexOf(position) >= 0 ? "5px" : "unset",
    bottom: [POSITION_BOTTOM].indexOf(position) >= 0 ? "5px" : "unset",
    //inner styling
    backgroundColor: "rgba(19, 20, 22, 0.90)",
    borderRadius: "2px",
    display: "flex",
    flexDirection: isHorizontal ? "row" : "column",
    padding: isHorizontal ? "1px 2px" : "2px 1px"
  };
  return import_react10.default.createElement("div", {
    style,
    role: "toolbar"
  }, import_react10.default.createElement(ToolbarButton, {
    toolbarPosition: position,
    active: tool === TOOL_NONE,
    activeColor: activeToolColor,
    name: "unselect-tools",
    title: "Selection",
    onClick: (event) => handleChangeTool(event, TOOL_NONE)
  }, import_react10.default.createElement(IconCursor, null)), import_react10.default.createElement(ToolbarButton, {
    toolbarPosition: position,
    active: tool === TOOL_PAN,
    activeColor: activeToolColor,
    name: "select-tool-pan",
    title: "Pan",
    onClick: (event) => handleChangeTool(event, TOOL_PAN)
  }, import_react10.default.createElement(IconPan, null)), import_react10.default.createElement(ToolbarButton, {
    toolbarPosition: position,
    active: tool === TOOL_ZOOM_IN,
    activeColor: activeToolColor,
    name: "select-tool-zoom-in",
    title: "Zoom in",
    onClick: (event) => handleChangeTool(event, TOOL_ZOOM_IN)
  }, import_react10.default.createElement(IconZoomIn, null)), import_react10.default.createElement(ToolbarButton, {
    toolbarPosition: position,
    active: tool === TOOL_ZOOM_OUT,
    activeColor: activeToolColor,
    name: "select-tool-zoom-out",
    title: "Zoom out",
    onClick: (event) => handleChangeTool(event, TOOL_ZOOM_OUT)
  }, import_react10.default.createElement(IconZoomOut, null)), import_react10.default.createElement(ToolbarButton, {
    toolbarPosition: position,
    active: false,
    activeColor: activeToolColor,
    name: "fit-to-viewer",
    title: "Fit to viewer",
    onClick: (event) => handleFit(event)
  }, import_react10.default.createElement(IconFit, null)));
}
Toolbar.propTypes = {
  tool: import_prop_types4.default.string.isRequired,
  onChangeTool: import_prop_types4.default.func.isRequired,
  value: import_prop_types4.default.object.isRequired,
  onChangeValue: import_prop_types4.default.func.isRequired,
  //customizations
  position: import_prop_types4.default.oneOf([POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),
  SVGAlignX: import_prop_types4.default.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),
  SVGAlignY: import_prop_types4.default.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM]),
  activeToolColor: import_prop_types4.default.string
};

// node_modules/react-svg-pan-zoom/build-es/ui/detect-touch.js
function isTouchDevice() {
  return "ontouchstart" in window || navigator.maxTouchPoints;
}

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/miniature.js
var import_react14 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/miniature-toggle-button.js
var import_react12 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/icon-arrow.js
var import_react11 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
function IconArrow(_ref) {
  let {
    open,
    position
  } = _ref;
  let transform2 = 0;
  switch (position) {
    case POSITION_LEFT:
      transform2 = open ? "rotate(225, 12, 13)" : "rotate(45, 12, 13)";
      break;
    case POSITION_RIGHT:
      transform2 = transform2 = open ? "rotate(135, 12, 13)" : "rotate(-45, 12, 13)";
      break;
    default:
  }
  return import_react11.default.createElement("svg", {
    width: 24,
    height: 24,
    stroke: "currentColor"
  }, import_react11.default.createElement("g", {
    transform: transform2
  }, import_react11.default.createElement("path", {
    fill: "#000000",
    d: "M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z"
  })));
}
IconArrow.propTypes = {
  open: import_prop_types5.default.bool.isRequired,
  position: import_prop_types5.default.oneOf([POSITION_RIGHT, POSITION_LEFT]).isRequired
};

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/miniature-toggle-button.js
function MiniatureToggleButton(_ref) {
  let {
    value,
    onChangeValue,
    position
  } = _ref;
  let style = {
    width: "24px",
    height: "24px",
    display: "block",
    position: "absolute",
    bottom: 0,
    [position === POSITION_LEFT ? "left" : "right"]: "0px",
    background: "rgba(19, 20, 22, 0.901961)",
    border: 0,
    padding: 0,
    outline: 0,
    color: "#fff"
  };
  let action = value.miniatureOpen ? closeMiniature : openMiniature;
  return import_react12.default.createElement("button", {
    type: "button",
    style,
    onClick: () => onChangeValue(action(value))
  }, import_react12.default.createElement(IconArrow, {
    open: value.miniatureOpen,
    position
  }));
}
MiniatureToggleButton.propTypes = {
  value: import_prop_types6.default.object.isRequired,
  onChangeValue: import_prop_types6.default.func.isRequired,
  position: import_prop_types6.default.oneOf([POSITION_RIGHT, POSITION_LEFT]).isRequired
};

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/miniature-mask.js
var import_react13 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var prefixID2 = "react-svg-pan-zoom_miniature";
function MiniatureMask(_ref) {
  let {
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight,
    x1,
    y1,
    x2,
    y2,
    zoomToFit,
    _uid
  } = _ref;
  const maskID = `${prefixID2}_mask_${_uid}`;
  return import_react13.default.createElement("g", null, import_react13.default.createElement("defs", null, import_react13.default.createElement("mask", {
    id: maskID
  }, import_react13.default.createElement("rect", {
    x: SVGMinX,
    y: SVGMinY,
    width: SVGWidth,
    height: SVGHeight,
    fill: "#ffffff"
  }), import_react13.default.createElement("rect", {
    x: x1,
    y: y1,
    width: x2 - x1,
    height: y2 - y1
  }))), import_react13.default.createElement("rect", {
    x: SVGMinX,
    y: SVGMinY,
    width: SVGWidth,
    height: SVGHeight,
    style: {
      stroke: "none",
      fill: "#000",
      mask: `url(#${maskID})`,
      opacity: 0.4
    }
  }));
}
MiniatureMask.propTypes = {
  SVGWidth: import_prop_types7.default.number.isRequired,
  SVGHeight: import_prop_types7.default.number.isRequired,
  SVGMinX: import_prop_types7.default.number.isRequired,
  SVGMinY: import_prop_types7.default.number.isRequired,
  x1: import_prop_types7.default.number.isRequired,
  y1: import_prop_types7.default.number.isRequired,
  x2: import_prop_types7.default.number.isRequired,
  y2: import_prop_types7.default.number.isRequired,
  zoomToFit: import_prop_types7.default.number.isRequired
};
var miniature_mask_default = RandomUID(MiniatureMask);

// node_modules/react-svg-pan-zoom/build-es/ui-miniature/miniature.js
var DEFAULT_BACKGROUND = "#616264";
function Miniature(_ref) {
  let {
    value,
    onChangeValue,
    children,
    SVGBackground,
    background = DEFAULT_BACKGROUND,
    position = POSITION_LEFT,
    width: miniatureWidth = 100,
    height: miniatureHeight = 80
  } = _ref;
  let {
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight,
    viewerWidth,
    viewerHeight
  } = value;
  let ratio = SVGHeight / SVGWidth;
  let zoomToFit = ratio >= 1 ? miniatureHeight / SVGHeight : miniatureWidth / SVGWidth;
  let [{
    x: x1,
    y: y1
  }, {
    x: x2,
    y: y2
  }] = applyToPoints(inverse(value), [{
    x: 0,
    y: 0
  }, {
    x: viewerWidth,
    y: viewerHeight
  }]);
  let width, height;
  if (value.miniatureOpen) {
    width = miniatureWidth;
    height = miniatureHeight;
  } else {
    width = 24;
    height = 24;
  }
  let style = {
    position: "absolute",
    overflow: "hidden",
    outline: "1px solid rgba(19, 20, 22, 0.90)",
    transition: "width 200ms ease, height 200ms ease, bottom 200ms ease",
    width: width + "px",
    height: height + "px",
    bottom: "6px",
    [position === POSITION_LEFT ? "left" : "right"]: "6px",
    background
  };
  let centerTranslation = ratio >= 1 ? `translate(${(miniatureWidth - SVGWidth * zoomToFit) / 2 - SVGMinX * zoomToFit}, ${-SVGMinY * zoomToFit})` : `translate(${-SVGMinX * zoomToFit}, ${(miniatureHeight - SVGHeight * zoomToFit) / 2 - SVGMinY * zoomToFit})`;
  return import_react14.default.createElement("div", {
    role: "navigation",
    style
  }, import_react14.default.createElement("svg", {
    width: miniatureWidth,
    height: miniatureHeight,
    style: {
      pointerEvents: "none"
    }
  }, import_react14.default.createElement("g", {
    transform: centerTranslation
  }, import_react14.default.createElement("g", {
    transform: `scale(${zoomToFit}, ${zoomToFit})`
  }, import_react14.default.createElement("rect", {
    fill: SVGBackground,
    x: SVGMinX,
    y: SVGMinY,
    width: SVGWidth,
    height: SVGHeight
  }), children, import_react14.default.createElement(miniature_mask_default, {
    SVGWidth,
    SVGHeight,
    SVGMinX,
    SVGMinY,
    x1,
    y1,
    x2,
    y2,
    zoomToFit
  })))), import_react14.default.createElement(MiniatureToggleButton, {
    value,
    onChangeValue,
    position
  }));
}
Miniature.propTypes = {
  value: import_prop_types8.default.object.isRequired,
  onChangeValue: import_prop_types8.default.func.isRequired,
  SVGBackground: import_prop_types8.default.string.isRequired,
  //customizations
  position: import_prop_types8.default.oneOf([POSITION_RIGHT, POSITION_LEFT]),
  background: import_prop_types8.default.string,
  width: import_prop_types8.default.number,
  height: import_prop_types8.default.number
};

// node_modules/react-svg-pan-zoom/build-es/utils/is.js
function isNullOrUndefined(value) {
  return typeof value === "undefined" || value === null;
}

// node_modules/react-svg-pan-zoom/build-es/migration-tips.js
var github_base = "https://github.com/chrvadala/react-svg-pan-zoom/blob/main";
var doc_v2_to_v3 = github_base + "/docs/migrate-from-v2-to-v3.md";
function tipControlledComponent() {
  console.error(`HEY! With ReactSVGPanZoom >= 3 you MUST specify value and tool props. Please read here ${doc_v2_to_v3}`);
}
function tipDeprecatedMiniatureProps() {
  console.error(`HEY! With ReactSVGPanZoom >= 3 the props miniaturePosition, miniatureBackground, miniatureWidth, miniatureHeight can be specified as key in the miniatureProps object. Please read here ${doc_v2_to_v3}`);
}
function tipDeprecateToolbarProps() {
  console.error(`HEY! With ReactSVGPanZoom >= 3 the prop toolbarPosition can be specified as key in the toolbarProps object. Please read here ${doc_v2_to_v3}`);
}
function printMigrationTipsRelatedToProps(props) {
  if (isNullOrUndefined(props.tool) || isNullOrUndefined(props.value))
    tipControlledComponent();
  if (!isNullOrUndefined(props.miniaturePosition) || !isNullOrUndefined(props.miniatureBackground) || !isNullOrUndefined(props.miniatureWidth) || !isNullOrUndefined(props.miniatureHeight))
    tipDeprecatedMiniatureProps();
  if (!isNullOrUndefined(props.toolbarPosition))
    tipDeprecateToolbarProps();
}

// node_modules/react-svg-pan-zoom/build-es/viewer.js
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends2.apply(null, arguments);
}
function ownKeys6(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread6(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys6(Object(t), true).forEach(function(r2) {
      _defineProperty6(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys6(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty6(e, r, t) {
  return (r = _toPropertyKey6(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey6(t) {
  var i = _toPrimitive6(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive6(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var ReactSVGPanZoom = class extends import_react15.default.Component {
  constructor(props, context) {
    const {
      width: viewerWidth,
      height: viewerHeight,
      scaleFactorMin,
      scaleFactorMax,
      children
    } = props;
    const {
      viewBox: SVGViewBox
    } = children.props;
    let defaultValue;
    if (SVGViewBox) {
      const [SVGMinX, SVGMinY, SVGWidth, SVGHeight] = parseViewBox(SVGViewBox);
      defaultValue = getDefaultValue(viewerWidth, viewerHeight, SVGMinX, SVGMinY, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax);
    } else {
      const {
        width: SVGWidth,
        height: SVGHeight
      } = children.props;
      defaultValue = getDefaultValue(viewerWidth, viewerHeight, 0, 0, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax);
    }
    super(props, context);
    this.ViewerDOM = null;
    this.state = {
      pointerX: null,
      pointerY: null,
      defaultValue
    };
    this.autoPanLoop = this.autoPanLoop.bind(this);
    this.onWheel = this.onWheel.bind(this);
    if (true) {
      printMigrationTipsRelatedToProps(props);
    }
  }
  /** React hooks **/
  componentDidUpdate(prevProps) {
    const value = this.getValue();
    const props = this.props;
    let nextValue = value;
    let needUpdate = false;
    if (true) {
      printMigrationTipsRelatedToProps(props);
    }
    const {
      viewBox: SVGViewBox
    } = props.children.props;
    if (SVGViewBox) {
      const [x, y, width, height] = parseViewBox(SVGViewBox);
      if (value.SVGMinX !== x || value.SVGMinY !== y || value.SVGWidth !== width || value.SVGHeight !== height) {
        nextValue = setSVGViewBox(nextValue, x, y, width, height);
        needUpdate = true;
      }
    } else {
      const {
        width: SVGWidth,
        height: SVGHeight
      } = props.children.props;
      if (value.SVGWidth !== SVGWidth || value.SVGHeight !== SVGHeight) {
        nextValue = setSVGViewBox(nextValue, 0, 0, SVGWidth, SVGHeight);
        needUpdate = true;
      }
    }
    if (prevProps.width !== props.width || prevProps.height !== props.height) {
      nextValue = setViewerSize(nextValue, props.width, props.height);
      needUpdate = true;
    }
    if (prevProps.scaleFactorMin !== props.scaleFactorMin || prevProps.scaleFactorMax !== props.scaleFactorMax) {
      nextValue = setZoomLevels(nextValue, props.scaleFactorMin, props.scaleFactorMax);
      needUpdate = true;
    }
    if (needUpdate) {
      this.setValue(nextValue);
    }
  }
  componentDidMount() {
    this.autoPanIsRunning = true;
    requestAnimationFrame(this.autoPanLoop);
    this.ViewerDOM.addEventListener("wheel", this.onWheel, false);
  }
  componentWillUnmount() {
    this.autoPanIsRunning = false;
    this.ViewerDOM.removeEventListener("wheel", this.onWheel);
  }
  /** ReactSVGPanZoom handlers **/
  getValue() {
    if (isValueValid(this.props.value))
      return this.props.value;
    return this.state.defaultValue;
  }
  getTool() {
    if (this.props.tool)
      return this.props.tool;
    return TOOL_NONE;
  }
  setValue(nextValue) {
    let {
      onChangeValue,
      onZoom,
      onPan
    } = this.props;
    if (onChangeValue)
      onChangeValue(nextValue);
    if (nextValue.lastAction) {
      if (onZoom && nextValue.lastAction === ACTION_ZOOM)
        onZoom(nextValue);
      if (onPan && nextValue.lastAction === ACTION_PAN)
        onPan(nextValue);
    }
  }
  /** ReactSVGPanZoom methods **/
  pan(SVGDeltaX, SVGDeltaY) {
    let nextValue = pan(this.getValue(), SVGDeltaX, SVGDeltaY);
    this.setValue(nextValue);
  }
  zoom(SVGPointX, SVGPointY, scaleFactor) {
    let nextValue = zoom(this.getValue(), SVGPointX, SVGPointY, scaleFactor);
    this.setValue(nextValue);
  }
  fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {
    let nextValue = fitSelection(this.getValue(), selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);
    this.setValue(nextValue);
  }
  fitToViewer() {
    let SVGAlignX = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ALIGN_LEFT;
    let SVGAlignY = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ALIGN_TOP;
    let nextValue = fitToViewer(this.getValue(), SVGAlignX, SVGAlignY);
    this.setValue(nextValue);
  }
  zoomOnViewerCenter(scaleFactor) {
    let nextValue = zoomOnViewerCenter(this.getValue(), scaleFactor);
    this.setValue(nextValue);
  }
  setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {
    let nextValue = setPointOnViewerCenter(this.getValue(), SVGPointX, SVGPointY, zoomLevel);
    this.setValue(nextValue);
  }
  reset() {
    let nextValue = reset(this.getValue());
    this.setValue(nextValue);
  }
  openMiniature() {
    let nextValue = openMiniature(this.getValue());
    this.setValue(nextValue);
  }
  closeMiniature() {
    let nextValue = closeMiniature(this.getValue());
    this.setValue(nextValue);
  }
  /** ReactSVGPanZoom internals **/
  handleViewerEvent(event) {
    let {
      props,
      ViewerDOM
    } = this;
    if (!([TOOL_NONE, TOOL_AUTO].indexOf(this.getTool()) >= 0))
      return;
    if (event.target === ViewerDOM)
      return;
    let eventsHandler = {
      click: props.onClick,
      dblclick: props.onDoubleClick,
      mousemove: props.onMouseMove,
      mouseup: props.onMouseUp,
      mousedown: props.onMouseDown,
      touchstart: props.onTouchStart,
      touchmove: props.onTouchMove,
      touchend: props.onTouchEnd,
      touchcancel: props.onTouchCancel
    };
    let onEventHandler = eventsHandler[event.type];
    if (!onEventHandler)
      return;
    onEventHandler(eventFactory(event, props.value, ViewerDOM));
  }
  autoPanLoop() {
    let coords = {
      x: this.state.pointerX,
      y: this.state.pointerY
    };
    let nextValue = onInterval(null, this.ViewerDOM, this.getTool(), this.getValue(), this.props, coords);
    if (this.getValue() !== nextValue) {
      this.setValue(nextValue);
    }
    if (this.autoPanIsRunning) {
      requestAnimationFrame(this.autoPanLoop);
    }
  }
  onWheel(event) {
    let nextValue = onWheel(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
    if (this.getValue() !== nextValue)
      this.setValue(nextValue);
  }
  /** React renderer **/
  render() {
    let {
      props,
      state: {
        pointerX,
        pointerY
      }
    } = this;
    let tool = this.getTool();
    let value = this.getValue();
    let {
      customToolbar: CustomToolbar = Toolbar,
      customMiniature: CustomMiniature = Miniature
    } = props;
    let panningWithToolAuto = tool === TOOL_AUTO && value.mode === MODE_PANNING && value.startX !== value.endX && value.startY !== value.endY;
    let cursor;
    if (tool === TOOL_PAN)
      cursor = cursor_polyfill_default(value.mode === MODE_PANNING ? "grabbing" : "grab");
    if (tool === TOOL_ZOOM_IN)
      cursor = cursor_polyfill_default("zoom-in");
    if (tool === TOOL_ZOOM_OUT)
      cursor = cursor_polyfill_default("zoom-out");
    if (panningWithToolAuto)
      cursor = cursor_polyfill_default("grabbing");
    let blockChildEvents = [TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT].indexOf(tool) >= 0;
    blockChildEvents = blockChildEvents || panningWithToolAuto;
    const touchAction = this.props.detectPinchGesture || [TOOL_PAN, TOOL_AUTO].indexOf(this.getTool()) !== -1 ? "none" : void 0;
    const style = {
      display: "block",
      cursor,
      touchAction
    };
    return import_react15.default.createElement("div", {
      style: _objectSpread6({
        position: "relative",
        width: value.viewerWidth,
        height: value.viewerHeight
      }, props.style),
      className: this.props.className
    }, import_react15.default.createElement("svg", {
      ref: (ViewerDOM) => this.ViewerDOM = ViewerDOM,
      width: value.viewerWidth,
      height: value.viewerHeight,
      style,
      onMouseDown: (event) => {
        let nextValue = onMouseDown(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onMouseMove: (event) => {
        let {
          left,
          top
        } = this.ViewerDOM.getBoundingClientRect();
        let x = event.clientX - Math.round(left);
        let y = event.clientY - Math.round(top);
        let nextValue = onMouseMove(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props, {
          x,
          y
        });
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.setState({
          pointerX: x,
          pointerY: y
        });
        this.handleViewerEvent(event);
      },
      onMouseUp: (event) => {
        let nextValue = onMouseUp(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onClick: (event) => {
        this.handleViewerEvent(event);
      },
      onDoubleClick: (event) => {
        let nextValue = onDoubleClick(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onMouseEnter: (event) => {
        if (isTouchDevice())
          return;
        let nextValue = onMouseEnterOrLeave(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
      },
      onMouseLeave: (event) => {
        let nextValue = onMouseEnterOrLeave(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
      },
      onTouchStart: (event) => {
        let nextValue = onTouchStart(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onTouchMove: (event) => {
        let nextValue = onTouchMove(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onTouchEnd: (event) => {
        let nextValue = onTouchEnd(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      },
      onTouchCancel: (event) => {
        let nextValue = onTouchCancel(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);
        if (this.getValue() !== nextValue)
          this.setValue(nextValue);
        this.handleViewerEvent(event);
      }
    }, import_react15.default.createElement("rect", {
      fill: props.background,
      x: 0,
      y: 0,
      width: value.viewerWidth,
      height: value.viewerHeight,
      style: {
        pointerEvents: "none"
      }
    }), import_react15.default.createElement("g", {
      transform: toSVG(value),
      style: blockChildEvents ? {
        pointerEvents: "none"
      } : {}
    }, import_react15.default.createElement("rect", {
      fill: this.props.SVGBackground,
      style: this.props.SVGStyle,
      x: value.SVGMinX || 0,
      y: value.SVGMinY || 0,
      width: value.SVGWidth,
      height: value.SVGHeight
    }), import_react15.default.createElement("g", null, props.children.props.children)), !([TOOL_NONE, TOOL_AUTO].indexOf(tool) >= 0 && props.detectAutoPan && value.focus) ? null : import_react15.default.createElement("g", {
      style: {
        pointerEvents: "none"
      }
    }, !(pointerY <= 20) ? null : import_react15.default.createElement(border_gradient_default, {
      direction: POSITION_TOP,
      width: value.viewerWidth,
      height: value.viewerHeight
    }), !(value.viewerWidth - pointerX <= 20) ? null : import_react15.default.createElement(border_gradient_default, {
      direction: POSITION_RIGHT,
      width: value.viewerWidth,
      height: value.viewerHeight
    }), !(value.viewerHeight - pointerY <= 20) ? null : import_react15.default.createElement(border_gradient_default, {
      direction: POSITION_BOTTOM,
      width: value.viewerWidth,
      height: value.viewerHeight
    }), !(value.focus && pointerX <= 20) ? null : import_react15.default.createElement(border_gradient_default, {
      direction: POSITION_LEFT,
      width: value.viewerWidth,
      height: value.viewerHeight
    })), !(value.mode === MODE_ZOOMING) ? null : import_react15.default.createElement(Selection, {
      startX: value.startX,
      startY: value.startY,
      endX: value.endX,
      endY: value.endY
    })), props.toolbarProps.position === POSITION_NONE ? null : import_react15.default.createElement(CustomToolbar, _extends2({}, this.props.toolbarProps, {
      value,
      onChangeValue: (value2) => this.setValue(value2),
      tool,
      onChangeTool: (tool2) => this.props.onChangeTool(tool2)
    })), props.miniatureProps.position === POSITION_NONE ? null : import_react15.default.createElement(CustomMiniature, _extends2({}, this.props.miniatureProps, {
      value,
      onChangeValue: (value2) => this.setValue(value2),
      SVGBackground: this.props.SVGBackground
    }), props.children.props.children));
  }
};
ReactSVGPanZoom.propTypes = {
  /**************************************************************************/
  /*  Viewer configuration                                                  */
  /**************************************************************************/
  /**
   *   width of the viewer displayed on screen
   */
  width: import_prop_types9.default.number.isRequired,
  /**
  * height of the viewer displayed on screen
  */
  height: import_prop_types9.default.number.isRequired,
  /**
  * value of the viewer (current camera view)
  */
  value: import_prop_types9.default.oneOfType([import_prop_types9.default.object, import_prop_types9.default.shape({
    version: import_prop_types9.default.oneOf([2]).isRequired,
    mode: import_prop_types9.default.oneOf([MODE_IDLE, MODE_PANNING, MODE_ZOOMING]).isRequired,
    focus: import_prop_types9.default.bool.isRequired,
    a: import_prop_types9.default.number.isRequired,
    b: import_prop_types9.default.number.isRequired,
    c: import_prop_types9.default.number.isRequired,
    d: import_prop_types9.default.number.isRequired,
    e: import_prop_types9.default.number.isRequired,
    f: import_prop_types9.default.number.isRequired,
    viewerWidth: import_prop_types9.default.number.isRequired,
    viewerHeight: import_prop_types9.default.number.isRequired,
    SVGMinX: import_prop_types9.default.number.isRequired,
    SVGMinY: import_prop_types9.default.number.isRequired,
    SVGWidth: import_prop_types9.default.number.isRequired,
    SVGHeight: import_prop_types9.default.number.isRequired,
    startX: import_prop_types9.default.number,
    startY: import_prop_types9.default.number,
    endX: import_prop_types9.default.number,
    endY: import_prop_types9.default.number,
    miniatureOpen: import_prop_types9.default.bool.isRequired
  })]).isRequired,
  /**
  * handler something changed
  */
  onChangeValue: import_prop_types9.default.func.isRequired,
  /**
  * current active tool (TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT)
  */
  tool: import_prop_types9.default.oneOf([TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT]).isRequired,
  /**
  * handler tool changed
  */
  onChangeTool: import_prop_types9.default.func.isRequired,
  /**************************************************************************/
  /* Customize style                                                        */
  /**************************************************************************/
  /**
  * background of the viewer
  */
  background: import_prop_types9.default.string,
  /**
  * background of the svg
  */
  SVGBackground: import_prop_types9.default.string,
  /**
  * style of the svg
  */
  SVGStyle: import_prop_types9.default.object,
  /**
  * CSS style of the Viewer
  */
  style: import_prop_types9.default.object,
  /**
  * className of the Viewer
  */
  className: import_prop_types9.default.string,
  /**************************************************************************/
  /* Detect events                                                          */
  /**************************************************************************/
  /**
  * perform zoom operation on mouse scroll
  */
  detectWheel: import_prop_types9.default.bool,
  /**
  * perform PAN if the mouse is on viewer border
  */
  detectAutoPan: import_prop_types9.default.bool,
  /**
  * perform zoom operation on pinch gesture
  */
  detectPinchGesture: import_prop_types9.default.bool,
  /**
  * handler zoom level changed
  */
  onZoom: import_prop_types9.default.func,
  /**
  * handler pan action performed
  */
  onPan: import_prop_types9.default.func,
  /**
  * handler click
  */
  onClick: import_prop_types9.default.func,
  /**
  * handler double click
  */
  onDoubleClick: import_prop_types9.default.func,
  /**
  * handler mouseup
  */
  onMouseUp: import_prop_types9.default.func,
  /**
  * handler mousemove
  */
  onMouseMove: import_prop_types9.default.func,
  /**
  * handler mousedown
  */
  onMouseDown: import_prop_types9.default.func,
  /**************************************************************************/
  /* Some advanced configurations                                           */
  /**************************************************************************/
  /**
  * if disabled the user can move the image outside the viewer
  */
  preventPanOutside: import_prop_types9.default.bool,
  /**
  * how much scale in or out
  */
  scaleFactor: import_prop_types9.default.number,
  /**
  * how much scale in or out on mouse wheel (requires detectWheel enabled)
  */
  scaleFactorOnWheel: import_prop_types9.default.number,
  /**
  * maximum amount of scale a user can zoom in to
  */
  scaleFactorMax: import_prop_types9.default.number,
  /**
  * minimum amount of a scale a user can zoom out of
  */
  scaleFactorMin: import_prop_types9.default.number,
  /**
  * modifier keys //https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
  */
  modifierKeys: import_prop_types9.default.array,
  /**
  * Turn off zoom on double click
  */
  disableDoubleClickZoomWithToolAuto: import_prop_types9.default.bool,
  /**************************************************************************/
  /* Miniature configurations                                                 */
  /**************************************************************************/
  /**
  * override miniature component
  */
  customMiniature: import_prop_types9.default.oneOfType([import_prop_types9.default.element, import_prop_types9.default.func]),
  /**
  * miniature props
  */
  miniatureProps: import_prop_types9.default.shape({
    position: import_prop_types9.default.oneOf([POSITION_NONE, POSITION_RIGHT, POSITION_LEFT]),
    background: import_prop_types9.default.string,
    width: import_prop_types9.default.number,
    height: import_prop_types9.default.number
  }),
  /**************************************************************************/
  /* Toolbar configurations                                                 */
  /**************************************************************************/
  /**
  * override toolbar component
  */
  customToolbar: import_prop_types9.default.oneOfType([import_prop_types9.default.element, import_prop_types9.default.func]),
  /**
  * toolbar props
  */
  toolbarProps: import_prop_types9.default.shape({
    position: import_prop_types9.default.oneOf([POSITION_NONE, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),
    SVGAlignX: import_prop_types9.default.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),
    SVGAlignY: import_prop_types9.default.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM]),
    activeToolColor: import_prop_types9.default.string
  }),
  /**************************************************************************/
  /* Children Check                                                         */
  /**************************************************************************/
  /**
  * accept only one node SVG
  */
  children: function(props, propName, componentName) {
    let prop = props[propName];
    let types = ["svg"];
    if (import_react15.default.Children.count(prop) !== 1 || types.indexOf(prop.type) === -1) {
      return new Error("`" + componentName + "` should have a single child of the following types:  `" + types.join("`, `") + "`.");
    }
    if ((!prop.props.hasOwnProperty("width") || !prop.props.hasOwnProperty("height")) && !prop.props.hasOwnProperty("viewBox")) {
      return new Error("SVG should have props `width` and `height` or `viewBox`");
    }
  }
};
ReactSVGPanZoom.defaultProps = {
  style: {},
  background: "#616264",
  SVGBackground: "#fff",
  SVGStyle: {},
  detectWheel: true,
  detectAutoPan: true,
  detectPinchGesture: true,
  modifierKeys: ["Alt", "Shift", "Control"],
  preventPanOutside: true,
  scaleFactor: 1.1,
  scaleFactorOnWheel: 1.06,
  disableZoomWithToolAuto: false,
  onZoom: null,
  onPan: null,
  toolbarProps: {},
  miniatureProps: {}
};

// node_modules/react-svg-pan-zoom/build-es/uncontrolled-viewer.js
var import_react16 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
var _excluded = ["width", "height", "onChangeTool", "onChangeValue"];
function _extends3() {
  return _extends3 = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends3.apply(null, arguments);
}
function _objectWithoutProperties(e, t) {
  if (null == e)
    return {};
  var o, r, i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    for (r = 0; r < s.length; r++)
      o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r)
    return {};
  var t = {};
  for (var n in r)
    if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n))
        continue;
      t[n] = r[n];
    }
  return t;
}
var UncontrolledReactSVGPanZoom = class extends import_react16.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: props.defaultValue || {},
      tool: props.defaultTool || TOOL_NONE
    };
    this.Viewer = null;
    this.changeTool = this.changeTool.bind(this);
    this.changeValue = this.changeValue.bind(this);
  }
  changeTool(tool) {
    this.setState({
      tool
    });
  }
  changeValue(value) {
    this.setState({
      value
    });
  }
  pan(SVGDeltaX, SVGDeltaY) {
    this.Viewer.pan(SVGDeltaX, SVGDeltaY);
  }
  zoom(SVGPointX, SVGPointY, scaleFactor) {
    this.Viewer.zoom(SVGPointX, SVGPointY, scaleFactor);
  }
  fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {
    this.Viewer.fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);
  }
  fitToViewer(SVGAlignX, SVGAlignY) {
    this.Viewer.fitToViewer(SVGAlignX, SVGAlignY);
  }
  zoomOnViewerCenter(scaleFactor) {
    this.Viewer.zoomOnViewerCenter(scaleFactor);
  }
  setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {
    this.Viewer.setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel);
  }
  reset() {
    this.Viewer.reset();
  }
  openMiniature() {
    this.Viewer.openMiniature();
  }
  closeMiniature() {
    this.Viewer.closeMiniature();
  }
  render() {
    const _this$props = this.props, {
      width,
      height,
      onChangeTool,
      onChangeValue
    } = _this$props, props = _objectWithoutProperties(_this$props, _excluded);
    const {
      tool,
      value
    } = this.state;
    return import_react16.default.createElement(ReactSVGPanZoom, _extends3({
      width,
      height,
      tool,
      onChangeTool: this.changeTool,
      value,
      onChangeValue: this.changeValue,
      ref: (Viewer) => this.Viewer = Viewer
    }, props));
  }
};
UncontrolledReactSVGPanZoom.propTypes = {
  width: import_prop_types10.default.number.isRequired,
  height: import_prop_types10.default.number.isRequired,
  defaultValue: import_prop_types10.default.object,
  defaultTool: import_prop_types10.default.string
};
export {
  ACTION_PAN,
  ACTION_ZOOM,
  ALIGN_BOTTOM,
  ALIGN_CENTER,
  ALIGN_COVER,
  ALIGN_LEFT,
  ALIGN_RIGHT,
  ALIGN_TOP,
  INITIAL_VALUE,
  IconCursor,
  IconFit,
  IconPan,
  IconZoomIn,
  IconZoomOut,
  MODE_IDLE,
  MODE_PANNING,
  MODE_ZOOMING,
  Miniature,
  POSITION_BOTTOM,
  POSITION_LEFT,
  POSITION_NONE,
  POSITION_RIGHT,
  POSITION_TOP,
  ReactSVGPanZoom,
  TOOL_AUTO,
  TOOL_NONE,
  TOOL_PAN,
  TOOL_ZOOM_IN,
  TOOL_ZOOM_OUT,
  Toolbar,
  ToolbarButton,
  UncontrolledReactSVGPanZoom,
  closeMiniature,
  fitSelection,
  fitToViewer,
  openMiniature,
  pan,
  reset,
  setPointOnViewerCenter,
  zoom,
  zoomOnViewerCenter
};
//# sourceMappingURL=react-svg-pan-zoom.js.map
